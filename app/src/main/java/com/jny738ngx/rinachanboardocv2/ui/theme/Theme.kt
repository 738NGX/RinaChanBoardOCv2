package com.jny738ngx.rinachanboardocv2.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.ui.graphics.Color

enum class ThemeFamily { Mius, Aqours, Niji, Liella, Hasu }

@Composable
fun RinaChanBoardOCv2Theme(
    themeFamily: MutableState<ThemeFamily>,
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colorScheme = if (!darkTheme) {
        when (themeFamily.value) {
            ThemeFamily.Mius -> mius_lightScheme
            ThemeFamily.Aqours -> aqours_lightScheme
            ThemeFamily.Niji -> niji_lightScheme
            ThemeFamily.Liella -> liella_lightScheme
            ThemeFamily.Hasu -> hasu_lightScheme
        }
    } else {
        when (themeFamily.value) {
            ThemeFamily.Mius -> mius_darkScheme
            ThemeFamily.Aqours -> aqours_darkScheme
            ThemeFamily.Niji -> niji_darkScheme
            ThemeFamily.Liella -> liella_darkScheme
            ThemeFamily.Hasu -> hasu_darkScheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

private val mius_lightScheme = lightColorScheme(
    primary = mius_primaryLight,
    onPrimary = mius_onPrimaryLight,
    primaryContainer = mius_primaryContainerLight,
    onPrimaryContainer = mius_onPrimaryContainerLight,
    secondary = mius_secondaryLight,
    onSecondary = mius_onSecondaryLight,
    secondaryContainer = mius_secondaryContainerLight,
    onSecondaryContainer = mius_onSecondaryContainerLight,
    tertiary = mius_tertiaryLight,
    onTertiary = mius_onTertiaryLight,
    tertiaryContainer = mius_tertiaryContainerLight,
    onTertiaryContainer = mius_onTertiaryContainerLight,
    error = mius_errorLight,
    onError = mius_onErrorLight,
    errorContainer = mius_errorContainerLight,
    onErrorContainer = mius_onErrorContainerLight,
    background = mius_backgroundLight,
    onBackground = mius_onBackgroundLight,
    surface = mius_surfaceLight,
    onSurface = mius_onSurfaceLight,
    surfaceVariant = mius_surfaceVariantLight,
    onSurfaceVariant = mius_onSurfaceVariantLight,
    outline = mius_outlineLight,
    outlineVariant = mius_outlineVariantLight,
    scrim = mius_scrimLight,
    inverseSurface = mius_inverseSurfaceLight,
    inverseOnSurface = mius_inverseOnSurfaceLight,
    inversePrimary = mius_inversePrimaryLight,
    surfaceDim = mius_surfaceDimLight,
    surfaceBright = mius_surfaceBrightLight,
    surfaceContainerLowest = mius_surfaceContainerLowestLight,
    surfaceContainerLow = mius_surfaceContainerLowLight,
    surfaceContainer = mius_surfaceContainerLight,
    surfaceContainerHigh = mius_surfaceContainerHighLight,
    surfaceContainerHighest = mius_surfaceContainerHighestLight,
)

private val mius_darkScheme = darkColorScheme(
    primary = mius_primaryDark,
    onPrimary = mius_onPrimaryDark,
    primaryContainer = mius_primaryContainerDark,
    onPrimaryContainer = mius_onPrimaryContainerDark,
    secondary = mius_secondaryDark,
    onSecondary = mius_onSecondaryDark,
    secondaryContainer = mius_secondaryContainerDark,
    onSecondaryContainer = mius_onSecondaryContainerDark,
    tertiary = mius_tertiaryDark,
    onTertiary = mius_onTertiaryDark,
    tertiaryContainer = mius_tertiaryContainerDark,
    onTertiaryContainer = mius_onTertiaryContainerDark,
    error = mius_errorDark,
    onError = mius_onErrorDark,
    errorContainer = mius_errorContainerDark,
    onErrorContainer = mius_onErrorContainerDark,
    background = mius_backgroundDark,
    onBackground = mius_onBackgroundDark,
    surface = mius_surfaceDark,
    onSurface = mius_onSurfaceDark,
    surfaceVariant = mius_surfaceVariantDark,
    onSurfaceVariant = mius_onSurfaceVariantDark,
    outline = mius_outlineDark,
    outlineVariant = mius_outlineVariantDark,
    scrim = mius_scrimDark,
    inverseSurface = mius_inverseSurfaceDark,
    inverseOnSurface = mius_inverseOnSurfaceDark,
    inversePrimary = mius_inversePrimaryDark,
    surfaceDim = mius_surfaceDimDark,
    surfaceBright = mius_surfaceBrightDark,
    surfaceContainerLowest = mius_surfaceContainerLowestDark,
    surfaceContainerLow = mius_surfaceContainerLowDark,
    surfaceContainer = mius_surfaceContainerDark,
    surfaceContainerHigh = mius_surfaceContainerHighDark,
    surfaceContainerHighest = mius_surfaceContainerHighestDark,
)

private val aqours_lightScheme = lightColorScheme(
    primary = aqours_primaryLight,
    onPrimary = aqours_onPrimaryLight,
    primaryContainer = aqours_primaryContainerLight,
    onPrimaryContainer = aqours_onPrimaryContainerLight,
    secondary = aqours_secondaryLight,
    onSecondary = aqours_onSecondaryLight,
    secondaryContainer = aqours_secondaryContainerLight,
    onSecondaryContainer = aqours_onSecondaryContainerLight,
    tertiary = aqours_tertiaryLight,
    onTertiary = aqours_onTertiaryLight,
    tertiaryContainer = aqours_tertiaryContainerLight,
    onTertiaryContainer = aqours_onTertiaryContainerLight,
    error = aqours_errorLight,
    onError = aqours_onErrorLight,
    errorContainer = aqours_errorContainerLight,
    onErrorContainer = aqours_onErrorContainerLight,
    background = aqours_backgroundLight,
    onBackground = aqours_onBackgroundLight,
    surface = aqours_surfaceLight,
    onSurface = aqours_onSurfaceLight,
    surfaceVariant = aqours_surfaceVariantLight,
    onSurfaceVariant = aqours_onSurfaceVariantLight,
    outline = aqours_outlineLight,
    outlineVariant = aqours_outlineVariantLight,
    scrim = aqours_scrimLight,
    inverseSurface = aqours_inverseSurfaceLight,
    inverseOnSurface = aqours_inverseOnSurfaceLight,
    inversePrimary = aqours_inversePrimaryLight,
    surfaceDim = aqours_surfaceDimLight,
    surfaceBright = aqours_surfaceBrightLight,
    surfaceContainerLowest = aqours_surfaceContainerLowestLight,
    surfaceContainerLow = aqours_surfaceContainerLowLight,
    surfaceContainer = aqours_surfaceContainerLight,
    surfaceContainerHigh = aqours_surfaceContainerHighLight,
    surfaceContainerHighest = aqours_surfaceContainerHighestLight,
)

private val aqours_darkScheme = darkColorScheme(
    primary = aqours_primaryDark,
    onPrimary = aqours_onPrimaryDark,
    primaryContainer = aqours_primaryContainerDark,
    onPrimaryContainer = aqours_onPrimaryContainerDark,
    secondary = aqours_secondaryDark,
    onSecondary = aqours_onSecondaryDark,
    secondaryContainer = aqours_secondaryContainerDark,
    onSecondaryContainer = aqours_onSecondaryContainerDark,
    tertiary = aqours_tertiaryDark,
    onTertiary = aqours_onTertiaryDark,
    tertiaryContainer = aqours_tertiaryContainerDark,
    onTertiaryContainer = aqours_onTertiaryContainerDark,
    error = aqours_errorDark,
    onError = aqours_onErrorDark,
    errorContainer = aqours_errorContainerDark,
    onErrorContainer = aqours_onErrorContainerDark,
    background = aqours_backgroundDark,
    onBackground = aqours_onBackgroundDark,
    surface = aqours_surfaceDark,
    onSurface = aqours_onSurfaceDark,
    surfaceVariant = aqours_surfaceVariantDark,
    onSurfaceVariant = aqours_onSurfaceVariantDark,
    outline = aqours_outlineDark,
    outlineVariant = aqours_outlineVariantDark,
    scrim = aqours_scrimDark,
    inverseSurface = aqours_inverseSurfaceDark,
    inverseOnSurface = aqours_inverseOnSurfaceDark,
    inversePrimary = aqours_inversePrimaryDark,
    surfaceDim = aqours_surfaceDimDark,
    surfaceBright = aqours_surfaceBrightDark,
    surfaceContainerLowest = aqours_surfaceContainerLowestDark,
    surfaceContainerLow = aqours_surfaceContainerLowDark,
    surfaceContainer = aqours_surfaceContainerDark,
    surfaceContainerHigh = aqours_surfaceContainerHighDark,
    surfaceContainerHighest = aqours_surfaceContainerHighestDark,
)

private val niji_lightScheme = lightColorScheme(
    primary = niji_primaryLight,
    onPrimary = niji_onPrimaryLight,
    primaryContainer = niji_primaryContainerLight,
    onPrimaryContainer = niji_onPrimaryContainerLight,
    secondary = niji_secondaryLight,
    onSecondary = niji_onSecondaryLight,
    secondaryContainer = niji_secondaryContainerLight,
    onSecondaryContainer = niji_onSecondaryContainerLight,
    tertiary = niji_tertiaryLight,
    onTertiary = niji_onTertiaryLight,
    tertiaryContainer = niji_tertiaryContainerLight,
    onTertiaryContainer = niji_onTertiaryContainerLight,
    error = niji_errorLight,
    onError = niji_onErrorLight,
    errorContainer = niji_errorContainerLight,
    onErrorContainer = niji_onErrorContainerLight,
    background = niji_backgroundLight,
    onBackground = niji_onBackgroundLight,
    surface = niji_surfaceLight,
    onSurface = niji_onSurfaceLight,
    surfaceVariant = niji_surfaceVariantLight,
    onSurfaceVariant = niji_onSurfaceVariantLight,
    outline = niji_outlineLight,
    outlineVariant = niji_outlineVariantLight,
    scrim = niji_scrimLight,
    inverseSurface = niji_inverseSurfaceLight,
    inverseOnSurface = niji_inverseOnSurfaceLight,
    inversePrimary = niji_inversePrimaryLight,
    surfaceDim = niji_surfaceDimLight,
    surfaceBright = niji_surfaceBrightLight,
    surfaceContainerLowest = niji_surfaceContainerLowestLight,
    surfaceContainerLow = niji_surfaceContainerLowLight,
    surfaceContainer = niji_surfaceContainerLight,
    surfaceContainerHigh = niji_surfaceContainerHighLight,
    surfaceContainerHighest = niji_surfaceContainerHighestLight,
)

private val niji_darkScheme = darkColorScheme(
    primary = niji_primaryDark,
    onPrimary = niji_onPrimaryDark,
    primaryContainer = niji_primaryContainerDark,
    onPrimaryContainer = niji_onPrimaryContainerDark,
    secondary = niji_secondaryDark,
    onSecondary = niji_onSecondaryDark,
    secondaryContainer = niji_secondaryContainerDark,
    onSecondaryContainer = niji_onSecondaryContainerDark,
    tertiary = niji_tertiaryDark,
    onTertiary = niji_onTertiaryDark,
    tertiaryContainer = niji_tertiaryContainerDark,
    onTertiaryContainer = niji_onTertiaryContainerDark,
    error = niji_errorDark,
    onError = niji_onErrorDark,
    errorContainer = niji_errorContainerDark,
    onErrorContainer = niji_onErrorContainerDark,
    background = niji_backgroundDark,
    onBackground = niji_onBackgroundDark,
    surface = niji_surfaceDark,
    onSurface = niji_onSurfaceDark,
    surfaceVariant = niji_surfaceVariantDark,
    onSurfaceVariant = niji_onSurfaceVariantDark,
    outline = niji_outlineDark,
    outlineVariant = niji_outlineVariantDark,
    scrim = niji_scrimDark,
    inverseSurface = niji_inverseSurfaceDark,
    inverseOnSurface = niji_inverseOnSurfaceDark,
    inversePrimary = niji_inversePrimaryDark,
    surfaceDim = niji_surfaceDimDark,
    surfaceBright = niji_surfaceBrightDark,
    surfaceContainerLowest = niji_surfaceContainerLowestDark,
    surfaceContainerLow = niji_surfaceContainerLowDark,
    surfaceContainer = niji_surfaceContainerDark,
    surfaceContainerHigh = niji_surfaceContainerHighDark,
    surfaceContainerHighest = niji_surfaceContainerHighestDark,
)

private val liella_lightScheme = lightColorScheme(
    primary = liella_primaryLight,
    onPrimary = liella_onPrimaryLight,
    primaryContainer = liella_primaryContainerLight,
    onPrimaryContainer = liella_onPrimaryContainerLight,
    secondary = liella_secondaryLight,
    onSecondary = liella_onSecondaryLight,
    secondaryContainer = liella_secondaryContainerLight,
    onSecondaryContainer = liella_onSecondaryContainerLight,
    tertiary = liella_tertiaryLight,
    onTertiary = liella_onTertiaryLight,
    tertiaryContainer = liella_tertiaryContainerLight,
    onTertiaryContainer = liella_onTertiaryContainerLight,
    error = liella_errorLight,
    onError = liella_onErrorLight,
    errorContainer = liella_errorContainerLight,
    onErrorContainer = liella_onErrorContainerLight,
    background = liella_backgroundLight,
    onBackground = liella_onBackgroundLight,
    surface = liella_surfaceLight,
    onSurface = liella_onSurfaceLight,
    surfaceVariant = liella_surfaceVariantLight,
    onSurfaceVariant = liella_onSurfaceVariantLight,
    outline = liella_outlineLight,
    outlineVariant = liella_outlineVariantLight,
    scrim = liella_scrimLight,
    inverseSurface = liella_inverseSurfaceLight,
    inverseOnSurface = liella_inverseOnSurfaceLight,
    inversePrimary = liella_inversePrimaryLight,
    surfaceDim = liella_surfaceDimLight,
    surfaceBright = liella_surfaceBrightLight,
    surfaceContainerLowest = liella_surfaceContainerLowestLight,
    surfaceContainerLow = liella_surfaceContainerLowLight,
    surfaceContainer = liella_surfaceContainerLight,
    surfaceContainerHigh = liella_surfaceContainerHighLight,
    surfaceContainerHighest = liella_surfaceContainerHighestLight,
)

private val liella_darkScheme = darkColorScheme(
    primary = liella_primaryDark,
    onPrimary = liella_onPrimaryDark,
    primaryContainer = liella_primaryContainerDark,
    onPrimaryContainer = liella_onPrimaryContainerDark,
    secondary = liella_secondaryDark,
    onSecondary = liella_onSecondaryDark,
    secondaryContainer = liella_secondaryContainerDark,
    onSecondaryContainer = liella_onSecondaryContainerDark,
    tertiary = liella_tertiaryDark,
    onTertiary = liella_onTertiaryDark,
    tertiaryContainer = liella_tertiaryContainerDark,
    onTertiaryContainer = liella_onTertiaryContainerDark,
    error = liella_errorDark,
    onError = liella_onErrorDark,
    errorContainer = liella_errorContainerDark,
    onErrorContainer = liella_onErrorContainerDark,
    background = liella_backgroundDark,
    onBackground = liella_onBackgroundDark,
    surface = liella_surfaceDark,
    onSurface = liella_onSurfaceDark,
    surfaceVariant = liella_surfaceVariantDark,
    onSurfaceVariant = liella_onSurfaceVariantDark,
    outline = liella_outlineDark,
    outlineVariant = liella_outlineVariantDark,
    scrim = liella_scrimDark,
    inverseSurface = liella_inverseSurfaceDark,
    inverseOnSurface = liella_inverseOnSurfaceDark,
    inversePrimary = liella_inversePrimaryDark,
    surfaceDim = liella_surfaceDimDark,
    surfaceBright = liella_surfaceBrightDark,
    surfaceContainerLowest = liella_surfaceContainerLowestDark,
    surfaceContainerLow = liella_surfaceContainerLowDark,
    surfaceContainer = liella_surfaceContainerDark,
    surfaceContainerHigh = liella_surfaceContainerHighDark,
    surfaceContainerHighest = liella_surfaceContainerHighestDark,
)

private val hasu_lightScheme = lightColorScheme(
    primary = hasu_primaryLight,
    onPrimary = hasu_onPrimaryLight,
    primaryContainer = hasu_primaryContainerLight,
    onPrimaryContainer = hasu_onPrimaryContainerLight,
    secondary = hasu_secondaryLight,
    onSecondary = hasu_onSecondaryLight,
    secondaryContainer = hasu_secondaryContainerLight,
    onSecondaryContainer = hasu_onSecondaryContainerLight,
    tertiary = hasu_tertiaryLight,
    onTertiary = hasu_onTertiaryLight,
    tertiaryContainer = hasu_tertiaryContainerLight,
    onTertiaryContainer = hasu_onTertiaryContainerLight,
    error = hasu_errorLight,
    onError = hasu_onErrorLight,
    errorContainer = hasu_errorContainerLight,
    onErrorContainer = hasu_onErrorContainerLight,
    background = hasu_backgroundLight,
    onBackground = hasu_onBackgroundLight,
    surface = hasu_surfaceLight,
    onSurface = hasu_onSurfaceLight,
    surfaceVariant = hasu_surfaceVariantLight,
    onSurfaceVariant = hasu_onSurfaceVariantLight,
    outline = hasu_outlineLight,
    outlineVariant = hasu_outlineVariantLight,
    scrim = hasu_scrimLight,
    inverseSurface = hasu_inverseSurfaceLight,
    inverseOnSurface = hasu_inverseOnSurfaceLight,
    inversePrimary = hasu_inversePrimaryLight,
    surfaceDim = hasu_surfaceDimLight,
    surfaceBright = hasu_surfaceBrightLight,
    surfaceContainerLowest = hasu_surfaceContainerLowestLight,
    surfaceContainerLow = hasu_surfaceContainerLowLight,
    surfaceContainer = hasu_surfaceContainerLight,
    surfaceContainerHigh = hasu_surfaceContainerHighLight,
    surfaceContainerHighest = hasu_surfaceContainerHighestLight,
)

private val hasu_darkScheme = darkColorScheme(
    primary = hasu_primaryDark,
    onPrimary = hasu_onPrimaryDark,
    primaryContainer = hasu_primaryContainerDark,
    onPrimaryContainer = hasu_onPrimaryContainerDark,
    secondary = hasu_secondaryDark,
    onSecondary = hasu_onSecondaryDark,
    secondaryContainer = hasu_secondaryContainerDark,
    onSecondaryContainer = hasu_onSecondaryContainerDark,
    tertiary = hasu_tertiaryDark,
    onTertiary = hasu_onTertiaryDark,
    tertiaryContainer = hasu_tertiaryContainerDark,
    onTertiaryContainer = hasu_onTertiaryContainerDark,
    error = hasu_errorDark,
    onError = hasu_onErrorDark,
    errorContainer = hasu_errorContainerDark,
    onErrorContainer = hasu_onErrorContainerDark,
    background = hasu_backgroundDark,
    onBackground = hasu_onBackgroundDark,
    surface = hasu_surfaceDark,
    onSurface = hasu_onSurfaceDark,
    surfaceVariant = hasu_surfaceVariantDark,
    onSurfaceVariant = hasu_onSurfaceVariantDark,
    outline = hasu_outlineDark,
    outlineVariant = hasu_outlineVariantDark,
    scrim = hasu_scrimDark,
    inverseSurface = hasu_inverseSurfaceDark,
    inverseOnSurface = hasu_inverseOnSurfaceDark,
    inversePrimary = hasu_inversePrimaryDark,
    surfaceDim = hasu_surfaceDimDark,
    surfaceBright = hasu_surfaceBrightDark,
    surfaceContainerLowest = hasu_surfaceContainerLowestDark,
    surfaceContainerLow = hasu_surfaceContainerLowDark,
    surfaceContainer = hasu_surfaceContainerDark,
    surfaceContainerHigh = hasu_surfaceContainerHighDark,
    surfaceContainerHighest = hasu_surfaceContainerHighestDark,
)